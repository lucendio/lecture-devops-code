workflow:
  rules:
    # NOTE: run pipeline if commit is to a Merge/Pull-Request
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    # NOTE: run pipeline if commit is directly pushed to certain branches
    - if: >-
        $CI_PIPELINE_SOURCE == "push"
        && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "stable")
      when: always
    # NOTE: Otherwise
    - when: never

variables:
  version: 0.0.$CI_PIPELINE_IID

stages:
  - test
  - build
  - publish


job_test:
  stage: test
  image: mirror.gcr.io/library/golang:1.21
  script:
    - go get -t ./...
    - go test -race -v ./...


job_build:
  stage: build
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /stable/
      when: always
  image: mirror.gcr.io/library/golang:1.21
  before_script:
    - mkdir -p ./artifacts
  script:
    - go get -t ./...
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0
        go build
          -o ./artifact.bin
          ./*.go
  artifacts:
    paths:
      - ./artifact.bin
    expire_in: 10 sec


job_upload:
  stage: publish
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /stable/
      when: always
  image: registry.hub.docker.com/library/docker:24.0.7
  tags:
    - docker-privileged
  dependencies:
    - job_build
  services:
    # NOTE: when using a fully qualified image name, the 'alias' value must be
    #       set to 'docker', because the DOCKER_HOST environment variable uses
    #       'docker' as hostname; otherwise the job fails with '[...] no such host'
    - name: registry.hub.docker.com/library/docker:24.0.7-dind
      alias: docker
  script:
    - docker build
        --file ./Containerfile
        --build-arg binaryPath=./artifact.bin
        --tag "${CI_REGISTRY_IMAGE}:${version}"
        ./
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker push "${CI_REGISTRY_IMAGE}:${version}"
  after_script:
    - docker image rm --force "${CI_REGISTRY_IMAGE}:${version}"
